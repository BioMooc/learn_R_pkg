// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// colSums
arma::rowvec colSums(arma::mat mat);
RcppExport SEXP _pkgS5_colSums(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(colSums(mat));
    return rcpp_result_gen;
END_RCPP
}
// getRndMt
RObject getRndMt();
RcppExport SEXP _pkgS5_getRndMt() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getRndMt());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _pkgS5_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _pkgS5_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// callFunction
NumericVector callFunction(NumericVector x, Function f);
RcppExport SEXP _pkgS5_callFunction(SEXP xSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(callFunction(x, f));
    return rcpp_result_gen;
END_RCPP
}
// myfun
double myfun(Eigen::MatrixXd X, Eigen::MatrixXd Y);
RcppExport SEXP _pkgS5_myfun(SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(myfun(X, Y));
    return rcpp_result_gen;
END_RCPP
}
// getEigenValues
Eigen::VectorXd getEigenValues(Eigen::MatrixXd X);
RcppExport SEXP _pkgS5_getEigenValues(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(getEigenValues(X));
    return rcpp_result_gen;
END_RCPP
}
// getMaxCpp
double getMaxCpp(Rcpp::NumericVector v);
RcppExport SEXP _pkgS5_getMaxCpp(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(getMaxCpp(v));
    return rcpp_result_gen;
END_RCPP
}
// cumsum1
NumericVector cumsum1(NumericVector x);
RcppExport SEXP _pkgS5_cumsum1(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cumsum1(x));
    return rcpp_result_gen;
END_RCPP
}
// cumsum2
NumericVector cumsum2(NumericVector x);
RcppExport SEXP _pkgS5_cumsum2(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cumsum2(x));
    return rcpp_result_gen;
END_RCPP
}
// cumsum_sug
NumericVector cumsum_sug(NumericVector x);
RcppExport SEXP _pkgS5_cumsum_sug(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cumsum_sug(x));
    return rcpp_result_gen;
END_RCPP
}
// timesTwo
NumericVector timesTwo(NumericVector x);
RcppExport SEXP _pkgS5_timesTwo(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(timesTwo(x));
    return rcpp_result_gen;
END_RCPP
}
// positives
NumericVector positives(NumericVector x);
RcppExport SEXP _pkgS5_positives(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(positives(x));
    return rcpp_result_gen;
END_RCPP
}
// first_three
List first_three(List x);
RcppExport SEXP _pkgS5_first_three(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(first_three(x));
    return rcpp_result_gen;
END_RCPP
}
// with_names
List with_names(List x, CharacterVector y);
RcppExport SEXP _pkgS5_with_names(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(with_names(x, y));
    return rcpp_result_gen;
END_RCPP
}
// colSumsCpp
Rcpp::NumericVector colSumsCpp(Rcpp::NumericMatrix mat);
RcppExport SEXP _pkgS5_colSumsCpp(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(colSumsCpp(mat));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_pkgS5_colSums", (DL_FUNC) &_pkgS5_colSums, 1},
    {"_pkgS5_getRndMt", (DL_FUNC) &_pkgS5_getRndMt, 0},
    {"_pkgS5_rcpparma_outerproduct", (DL_FUNC) &_pkgS5_rcpparma_outerproduct, 1},
    {"_pkgS5_rcpparma_innerproduct", (DL_FUNC) &_pkgS5_rcpparma_innerproduct, 1},
    {"_pkgS5_callFunction", (DL_FUNC) &_pkgS5_callFunction, 2},
    {"_pkgS5_myfun", (DL_FUNC) &_pkgS5_myfun, 2},
    {"_pkgS5_getEigenValues", (DL_FUNC) &_pkgS5_getEigenValues, 1},
    {"_pkgS5_getMaxCpp", (DL_FUNC) &_pkgS5_getMaxCpp, 1},
    {"_pkgS5_cumsum1", (DL_FUNC) &_pkgS5_cumsum1, 1},
    {"_pkgS5_cumsum2", (DL_FUNC) &_pkgS5_cumsum2, 1},
    {"_pkgS5_cumsum_sug", (DL_FUNC) &_pkgS5_cumsum_sug, 1},
    {"_pkgS5_timesTwo", (DL_FUNC) &_pkgS5_timesTwo, 1},
    {"_pkgS5_positives", (DL_FUNC) &_pkgS5_positives, 1},
    {"_pkgS5_first_three", (DL_FUNC) &_pkgS5_first_three, 1},
    {"_pkgS5_with_names", (DL_FUNC) &_pkgS5_with_names, 2},
    {"_pkgS5_colSumsCpp", (DL_FUNC) &_pkgS5_colSumsCpp, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_pkgS5(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
